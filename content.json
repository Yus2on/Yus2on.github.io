{"pages":[],"posts":[{"title":"20200825-TIL","text":"TILToday I Learned(도메인 뒤집기) 12345678910111213141516171819202122232425262728293031323334353637383940/** * 도메인 뒤집기 * * 주어진 홈페이지 주소를 .을 기준으로 각각 뒤집어 출력하시오. * * ex) www.google.com -&gt; www.elgoog.moc * * 인자 * string: 홈페이지 주소 */public class DomainReverse { public static void main(String[] args) { String string = &quot;www.google.com&quot;; int i = string.indexOf('.'); // 첫번째 .을찾아서 위치 반환함 결과는 3 StringBuilder s = new StringBuilder(string.length()); // ()안에 길이를 설정. 길이는 14가 됨. while (i &gt; 0) { // 3, 6, -1 으로 i 가 -1일 때 반복문 탈출 // 왜 마지막이 -1이냐면 그때 str 은 com인데 . 이 없기 때문에 못 찾아서 -1을 반환함 StringBuilder s_ = new StringBuilder(string.substring(0, i)); string = string.substring(i + 1); // google.com, com // google.com -&gt; . 뒤에 것부터 가져와야하니까 +1 함. 4번째 인덱스부터 가져와서 str에 대입 // com -&gt; 6 + 1 = 7 이니까 인덱스 7번째부터 가져옴 그걸 str에 대입 s.append(s_.reverse()); s.append('.'); i = string.indexOf('.'); } // end while s.append(new StringBuilder(string).reverse()); // 마지막 com을 뒤집음 string = s.toString(); // 문자열로 변환 // toString() 메서드는 객체가 가지고 있는 정보나 값들을 문자열로 만들어 리턴하는 메소드임!!! // 결과값이 asdf@123 나오는 건 순수 str의 toString결과값임. 디폴트값 (의미x) System.out.println(string); }} 단일 스레드에서는 StringBuffer보다는 StringBuilder를 사용한다. 스레드 (Thread) : 프로세스에서 실행되는 작업의 단위. 프로그램에서 명령이 실행되는 흐름. 단일 스레드 == main 스레드 : main 메서드만을 이용하여 프로그램을 실행하는 방법 다중 스레드 : main 메서드와 별개로 실행되는 스레드를 만들어 명령이 동시에 실행되도록 만든 프로그램 main 메서드가 종료되도 프로그램이 종료되지 않음 (모든 스레드가 종료되면 프로그램이 종료) StringBuilder 사용 이유와 사용법 String은 immutable(불변) 객체로 String + String 일 때 새로운 String 객체가 생성되기 때문에 기존의 데이터에 더하는 방식으로 StringBuilder 를 사용함. 1StringBuilder sb = new StringBilder(); StringBilder는 append() 를 사용한다. 문자열을 더하는 역할로 뒤에 계속 문자열을 추가하는 메서드(함수). 123sb.append('.');//append(넣고싶은값);/** 새로운 객체를 만들지 않고 바로 이용할 수 있음 **/ 만들어진 문자열을 출력하기 위해서는 StringBuilder의 인스턴스의 toString 사용함. sb = sb.toString(); System.out.println(sb.toString());","link":"/2020/08/25/20200825-TIL/"},{"title":"20200827-TIL","text":"TILToday I Learned(MyMath 클래스 구현) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495/** * MyMath 클래스 구현하기 * 인스턴스를 생성할 수 없는 MyMath 클래스를 구현하시오. * * MyMath 클래스는 다음 정적 변수를 가진다. * PI = 3.1415927; * E = 2.718281; * * MyMath 클래스는 다음 정적(static) 메소드를 가진다. * min - 정수 또는 실수를 여러개 입력받아 최소값을 구한다. * max - 정수 또는 실수를 여러개 입력받아 최대값을 구한다. * abs - 정수 또는 실수를 입력받아 절대값을 구한다. * floor - 실수를 입력받아 내림 연산한 정수를 출력한다. * ceil - 실수를 입력받아 올림 연산한 정수를 출력한다. */public class MyMath { // public static double PI = 3.1415927; public final static double PI = 3.1415927; public final static double E = 2.718281; // 상수 -&gt; 관례적으로 클래스 상수(static final) // 자바에서 final은 해당 entity(객체)가 오로지 한 번 할당될 수 있음을 의미. public static int min(int... params) { int minVal = params[0]; for (int value: params) { minVal = value &gt; minVal ? minVal : value; } return minVal; } // 오버로딩(overloading) : 같은 이름의 함수(메서드)를 여러개 가지면서 매개변수(파라미터)의 타입과 개수가 다르도록 함 public static double min(double... params) { double minVal = params[0]; for (double value: params) { minVal = value &gt; minVal ? minVal : value; } return minVal; } public static int max(int... params) { int maxVal = params[0]; for (int value: params) { maxVal = value &lt; maxVal ? maxVal : value; } return maxVal; } public static double max(double... params) { double maxVal = params[0]; for (double value: params) { maxVal = value &lt; maxVal ? maxVal : value; } return maxVal; } public static int abs(int x) { return x &gt; 0 ? x : -x; } public static double abs (double x){ return x &gt; 0.0 ? x : -x; } // public static double floor(double x) { // return (x % 1.0 &lt; 0 ? x - 1 : x); // } // return type이 double이면 2.0 return 함 ..... // 정수를 출력해야 하기 때문에 return type 을 int로 받고 int로 casting public static int floor(double x) { return (int)(x % 1.0 &lt; 0 ? x - 1 : x); } public static int ceil(double x) { return (int)(x % 1.0 &gt; 0 ? x + 1 : x); }}class MyMathTest { public static void main(String[] args) { //System.out.println(MyMath()); // should fail System.out.println(MyMath.PI); System.out.println(MyMath.E); System.out.println(MyMath.min(2, 3, -4, 6)); System.out.println(MyMath.max(7, 0, 6, 16, -4)); System.out.println(MyMath.abs(5)); System.out.println(MyMath.abs(-2.3)); System.out.println(MyMath.floor(-1.5232)); System.out.println(MyMath.ceil(4.6452)); }} 왜 final 변수는 꼭 static 인가 final 변수 : 해당 변수가 생성자나 대입연산자를 통해 한 번만 초기화 가능함을 의미함. 상수를 만들 때 응용. final 메소드 : 해당 메소드를 오버라이드하거나 숨길 수 없음. final 클래스 : 해당 클래스는 상속할 수 없음. 문자 그대로 상속 계층 구조에서 ‘마지막’ 클래스… 1. final 멤버 변수가 반드시 상수는 아니다왜냐면 final의 정의가 ‘상수이다’가 아니라 ‘한 번만 초기화 가능하다’이기 때문에. 2. private 메소드와 final 클래스의 모든 메소드는 명시하지 않아도 final 처럼 동작한다.​ 오버라이드가 불가능하기 때문이다. (참고 : jls-8.4.3.3) 그래서 왜 static final이라고?그것은 클래스에서 사용할 해당 멤버 변수의 데이터와 그 의미, 용도를 고정시키겠다는 뜻. 해당 클래스를 쓸 때 변하지 않고 계속 일관된 값으로 쓸 것을 멤버 상수로 지정한다. 이 값들은 모든 클래스 인스턴스에서 똑같이 써야할 값이고, 인스턴스가 만들어질 때마다 새로 메모리를 잡고 초기화시키지 말고, 클래스 레벨에서 한 번만 잡아서 하나의 메모리 공간을 쭉 사용할 것이다. 오버로딩(Overloading)오버로딩(Overloading)은 메소드 오버로딩과 생성자 오버로딩이 있지만 개념은 같다. 같은 이름의 함수를 여러 개 정의하고, 매개변수의 유형과 개수를 다르게 하여 다양한 유형의 호출에 응답하게 한다. (같은 클래스내에서 같은 이름의 메서드를 사용하는것) 파라미터 값을 다양하게 받아 처리하기 위해 사용함 오버로딩의 조건 메소드의 이름이 같아야 한다. 매개변수의 개수 또는 타입이 달라야 한다. 매개변수는 같고 리턴타입(반환타입)이 다른 경우 오버로딩이 성립되지 않는다. 오버로딩 된 메서드들은 매개변수에 의해서만 구별될 수 있다. 오버로딩의 예시 - println()PrintStram 클래스의 println()는 어떤 타입의 파라미터를 지정해도 출력할 수 있도록 오버로딩 된 println() 메서드를 정의해놓고 있다. 오버로딩의 장점오버로딩을 구현해서 얻는 이득이 뭘까? 프로그램이 거대해지면 메소드 또한 많아진다. 이때 동일한 기능의 메소드를 매개값에 따라 다르게 이름을 정의하면 복잡하고 관리하기가 어려울 것이다 메서드를 사용할 때도 매개변수에 따라 일일히 이름을 기억해 사용해야하는 불편함이 발생한다. 위의 문제로 오버로딩을 함으로 동일한 기능을 가진 여러 메서드들이 하나의 이름으로 정의 될 수 있다. 그리고 메서드의 이름이 동일하고, 매개변수가 다른 점을 통해 같은 기능을 수행한다는 것도 유추할 수 있다. 동일한 기능의 메서드를 정의할 때 다양한 입력값(매개값)을 받기 위해서이다. 생성자 또한 외부로부터 입력되는 다양한 값으로 초기화를 하기 위해서 사용된다.","link":"/2020/08/28/20200827-TIL/"},{"title":"20200828-TIL","text":"TILToday I Learned(SingletonPattern) 123456789101112131415161718192021222324252627282930313233343536/** * 싱글톤 패턴 구현하기 * * 단 하나의 인스턴스만 존재할 수 있는 클래스 SingletonPattern을 구현하시오. * * 생성자를 외부에서 직접 호출할 수 없다. * 정적 메소드인 getInstance() 메소드를 이용해 객체를 받아온다. * 받아온 객체는 항상 같은 객체를 참조해야 한다. */public class SingletonPattern { private final static SingletonPattern instace = new SingletonPattern(); private SingletonPattern() {} // 기본생성자를 private 를 사용하여 생성을 불가능하게 하고 getInstance를 통해서만 생성이 가능 public static SingletonPattern getInstance(){ // getInstance는 내부적으로 생성되지 않았다면 생성 필요함!! // 기존에 생성된 값이 존재한다면 생성된 인스턴스를 리턴하는 형태로 프로그램 전반에 걸쳐 하나의 인스턴스만 유지함. // 인스턴스를 제공하는 메서드와 인스턴스 변수 모두 Static으로 선언된 정적 변수 및 메서드 // 기본 생성자를 통해 생성할 수 없는데 외부에서 인스턴스에 접근하려면 클래스 변수와 메서드에 접근을 허용해야하기 때문에 정적타입(static)으로 선언함 return instace; }}class SingletonPatternTest { public static void main(String[] args) { //SingletonPattern instance = new SingletonPattern(); // should fail SingletonPattern instanceOne = SingletonPattern.getInstance(); SingletonPattern instanceTwo = SingletonPattern.getInstance(); System.out.println(instanceOne == instanceTwo); // should be true }} 싱글턴(Singleton) 이란 ?정의 소프트웨어 디자인 패턴에서 싱글턴 패턴(Singleton pattern)을 따르는 클래스는, 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이고 최초 생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴한다. 이와 같은 디자인 유형을 싱글턴 패턴이라고 한다. 주로 공통된 객체를 여러개 생성해서 사용하는 DBCP(DataBase Connection Pool)와 같은 상황에서 많이 사용된다. 위키피디아의 정의와 같이 싱글턴 패턴은 하나의 객체만을 생성해 이후에 호출된 곳에서는 생성된 객체를 반환하여 프로그램 전반에서 하나의 인스턴스만을 사용하게 하는 패턴.싱글턴 패턴(Singleton Pattern)은 인스턴스가 오직 1개만 생성되야 하는 경우에 사용되는 패턴이다. 싱글턴 패턴을 사용해 하나의 인스턴스를 메모리에 등록해서 여러 스러드가 동시에 해당 인스턴스를 공유하여 사용하게끔 할 수 있음 (요청이 많은 곳에서 사용시 효율 상승) 싱글턴을 만들때 동시성(Concurrency) 문제를 고려해서 싱글턴 설계 필요 자바의 싱글턴 패턴(Sigleton Pattern in Java)싱글턴 패턴의 공통적인 특징은 private constructor(프라이빗 생성자) 를 가진다는 것과, static method 를 사용한다는 점. 싱글톤 패턴을 쓰는 이유 고정된 메모리 영역을 얻으면서 한번의 new로 인스턴스를 사용하기 때문에 메모리 낭비 방지. 싱글톤으로 만들어진 클래스의 인스턴스는 전역 인스턴스 =&gt; 다른 클래스의 인스턴스가 데이터 공유하기 쉬움 DBCP(DataBase Connection Pool)처럼 공통된 객체를 여러개 생성해서 사용해야하는 상황에서 많이 사용.(쓰레드풀, 캐시, 대화상자, 사용자 설정, 레지스트리 설정, 로그 기록 객체등) 인스턴스가 절대적으로 한개만 존재하는 것을 보증하고 싶을 경우 사용. 두 번째 이용시부터는 객체 로딩 시간이 현저하게 줄어 성능이 좋아지는 장점! 싱글톤 패턴의 문제점싱글톤 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유시킬 경우 다른 클래스의 인스턴스들 간에 결합도가 높아져 “개방-폐쇄 원칙” 을 위배하게 된다. (=객체 지향 설계 원칙에 어긋남) 유지보수가 까다로워짐 멀티 스레드 환경에서 동기화 처리 해야함","link":"/2020/08/28/20200828-TIL/"},{"title":"Hexo와 GitHub을 이용한 블로그 만들기","text":"TIL (Today I Learned) Let’s use Hexo(https://asciinema.org/a/233626) 12345# 1. my blog 폴더에서 hexo new post &quot;title&quot;$ vim file 경로 # tags 사용법 : 줄바꿈 - 태그내용 ( 태그 하나 뒤 컴마 사용하지 않음. -로 구분)$ hexo clean &amp;&amp; hexo generate$ hexo server # http://localhost:4000/ 에서 확인할 수 있다$ hexo deploy 배포 플러그인 설치깃허브 페이지에 배포하기 위해서는 hexo-deployer-git 플러그인을 설치해야 한다. 1$ npm install hexo-deployer-git --save 1234deploy: type: git repo: &lt;repository url&gt; branch: [branch] #published message: 처음 설정 시 한 번만 해주면 된다. 정적 리소스 생성하기아래 명령어를 실행하면 public 폴더가 생성 -&gt; 정적 리소스 생성 shell1$ hexo generate 배포하기사용자계정.github.io 주소로 들어가면 정상적으로 배포된 것을 확인할 수 있다. 1$ hexo deploy Practice Java의 정석 : 기초편 Chapter03 연산문(Operator) 정리 러버덕 1회차 준비 hexo post 2개 이상 추가 class, method 확실하게 개념 잡기 !!","link":"/2020/08/10/Hexo%EC%99%80-GitHub%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/"},{"title":"[Java] 기본 다지기 - 로또번호 추첨","text":"로또 번호 추첨기 case 3개 case 1과 2는 같은 맥락인데 더 간단하게 할 수 있는 방법을 찾고 싶었다 123456789101112131415161718192021222324252627282930313233343536import java.util.Random;public class Lotto { int a, b, c, d, e, f; // case 1 public void Random() { Random random = new Random(); a = random.nextInt(44) + 1; // 0 ~ 44 까지 랜덤 + 1 -&gt; 1 ~ 45까지 랜덤숫 생성 while (true) { b = random.nextInt(44) + 1; c = random.nextInt(44) + 1; d = random.nextInt(44) + 1; e = random.nextInt(44) + 1; f = random.nextInt(44) + 1; // 중복제거 if ( (b != a) &amp;&amp; (c != a &amp;&amp; c != b) &amp;&amp; (d != a &amp;&amp; d != b &amp;&amp; d != c ) &amp;&amp; (e != a &amp;&amp; e != b &amp;&amp; e != c &amp;&amp; e != d ) &amp;&amp; (f != a &amp;&amp; f != b &amp;&amp; f != c &amp;&amp; f != d &amp;&amp; f != e) ) { break; } } // end while System.out.print(&quot;이번주 행운번호는 \\n&quot;); System.out.println(a + &quot;, &quot; + b + &quot;, &quot; + c + &quot;, &quot; + d + &quot;, &quot; + e + &quot;, &quot; + f); } // end Random public static void main(String[] args) { Lotto lotto = new Lotto(); lotto.Random(); } // end main } 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import java.util.Random;public class Lotto { int a, b, c, d, e, f; // case 2 public void Random() { Random random = new Random(); a = random.nextInt(44) + 1; // 0 ~ 44 까지 랜덤 + 1 -&gt; 1 ~ 45까지 랜덤숫 생성 while (true) { b = random.nextInt(44) + 1; if (b != a) { break; // 중복 제거 } } // end while while (true) { c = random.nextInt(44) + 1; if (c != a &amp;&amp; c != b) { break; } } // end while while (true) { d = random.nextInt(44) + 1; if (d != a &amp;&amp; d != b &amp;&amp; d != c ) { break; } } // end while while (true) { e = random.nextInt(44) + 1; if (e != a &amp;&amp; e != b &amp;&amp; e != c &amp;&amp; e != d ) { break; } } // end while while (true) { f = random.nextInt(44) + 1; if (f != a &amp;&amp; f != b &amp;&amp; f != c &amp;&amp; f != d &amp;&amp; f != e) { break; } } // end while System.out.print(&quot;이번주 행운번호는 \\n&quot;); System.out.println(a + &quot;, &quot; + b + &quot;, &quot; + c + &quot;, &quot; + d + &quot;, &quot; + e + &quot;, &quot; + f); } public static void main(String[] args) { Lotto lotto = new Lotto(); lotto.Random(); }} 123456789101112131415161718192021222324252627282930313233343536public class Lotto { public static void main(String[] args) { Random r = new Random(); int[] loNum = new int[6]; // 번호가 입력될 배열 생성 int nextCount = 0; // 배열의 인덱스 값 int num = 0; // 로또번호를 담을 변수 for (; nextCount &lt; 6;) { // 증감식을 쓰지말고 일단 무조건 6번돌림 num = r.nextInt(45) + 1; // 번호 추출 if (nextCount == 0) { // 첫번째 인덱스에 들어갈 번호를 만드는 조건 loNum[nextCount] = num; System.out.print(loNum[nextCount] + &quot; &quot;); nextCount++; // 인덱스값1증가 } else { // 실질적인 번호추출은 여기서부터 loNum[nextCount] = num; // 두번째 로또번호 입력 int equalsNum = 0; // 반복된값을 검색하기 위한 변수 a: for (int j = 0; j &lt; nextCount; j++) { // 중복 값을 검색하기 위한 반복문 if (loNum[nextCount] == loNum[j]) { // 중복된 값 검증 equalsNum++; // 중복되었으면 변수1증가 break a; // 처음 반복문으로 감 } } // end for if (equalsNum == 0) { // 중복되었으면 equalsNum은 0이아님 중복안되었으면 실행 System.out.print(loNum[nextCount] + &quot; &quot;); // 두번째번호부터 출력 nextCount++; // 배열인덱스값증가 } } }// end for System.out.println(); // 줄바꿈 } // main}","link":"/2020/11/04/Java-%EA%B8%B0%EB%B3%B8-%EB%8B%A4%EC%A7%80%EA%B8%B0-%EB%A1%9C%EB%98%90%EB%B2%88%ED%98%B8-%EC%B6%94%EC%B2%A8/"},{"title":"My first blog post with hexo","text":"나의 첫번째 hexo 포스트마크다운 문법으로 포스트를 작성하고 hexo generate 를 수행하면 html로 변환 합니다.","link":"/2020/08/07/My-first-blog-post-with-hexo/"},{"title":"Oh My Zsh upgrade : unable to upgrade","text":"Oh My Zsh (zsh)zsh란? Oh My Zsh는 bash보다 최근에 나온 쉘인 zsh의 환경설정을 다루는 프레임워크이다. Z 쉘(Z shell, zsh)은 상호작용 로그인 셸이자 셸 스크립트를 위한 강력한 명령 줄 인터프리터로 사용할 수 있는 유닉스 쉘이다.Zsh는 bash, ksh, tcsh의 일부 기능을 포함하여 수많은 개선 사항이 갖추어진 확장형 본 쉘이다. 위키백과 zsh 설치 zsh 설치 확인 1$ zsh --version 설치가 되어 있다면123$ which zsh # 쉘의 위치 확인$ chsh -s /usr/bin/zsh # 기본 쉘 변경$ chsh -s `which zsh` # 위 두 개의 명령을 한 줄로 처리 설치가 되어 있지 않다면 OS12$ brew update$ brew install zsh Ubuntu1sudo apt-get install zsh 본론! zsh 업데이트 오류 12345[Oh My Zsh] Would you like to check for updates? [Y/n]: yUpgrading Oh My ZshCannot pull with rebase: You have unstaged changes.Please commit or stash them.There was an error updating. Try again later? 해결방법 터미널에서 아래 명령을 입력하여 zsh 디렉토리로 변경. 1$ ~ / .oh-my-zsh 상태가 마스터보다 앞서 있는지 확인. 1$ git status git에 진행 상황을 저장하고 헤드를 마스터로 다시 이동. 1$ git stash 끝! 터미널을 종료 했다가 다시 시작해서 업그레이드 진행. 아래는 위 명령들을 한 줄로 쓴 것이다!! 1$ cd &quot;$ZSH&quot; &amp;&amp; git stash &amp;&amp; upgrade_oh_my_zsh 출처 : github-robbyrussell/oh-my-zsh","link":"/2020/09/07/Oh-My-Zsh-upgrade-unable-to-upgrade/"},{"title":"[프로그래머스] 완주하지 못한 선수 &#x2F; Java","text":"완주하지 못한 선수 (Level 1)https://programmers.co.kr/learn/courses/30/lessons/42576문제 설명수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다. 마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요. 제한사항 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다. completion의 길이는 participant의 길이보다 1 작습니다. 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다. 참가자 중에는 동명이인이 있을 수 있습니다. 입출력 예 입출력 예 문제 요약 마라톤에 참여한 선수 이름 배열 : participant 완주한 선수 이름 배열 : completion 위의 두 배열이 주어지고, 이때 완주 하지 못한 선수의 이름을 return 문제풀이참가자 배열을 받아서 참가자 중 완주하지 못한 선수를 찾아서 반환한다. participant 배열에는 존재하고, completion 배열에는 없는 이름. 두 배열을 소트함. 반복문으로 두 배열의 요소를 비교한다. 이 때 배열의 요소가 같지 않다면 아래 두 가지 이유임. 동명이인이 있으며, 둘 중 하나가 완주하지 못 했다. participant 배열에는 존재하고 completion 배열에는 없다 =&gt; 완주하지 못 했다. 반복문이 끝난 후 배열의 마지막 요소를 리턴함 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import java.util.Arrays;/** * 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다. * completion의 길이는 participant의 길이보다 1 작습니다. * 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다. * 참가자 중에는 동명이인이 있을 수 있습니다. */class Solution { public String solution(String[] participant, String[] completion) { Arrays.sort(participant); // 배열 오름차순으로 정리 Arrays.sort(completion); int i; // for문 밖에서 사용하기 위해 변수 i 선언. 반복문 끝나면 마지막 요소 반환할거임 for(i = 0; i &lt; completion.length; i++){ // 완주자 수만큼 반복. 완자주는 참가자 - 1 if(!completion[i].equals(participant[i])){ // 완주자 명단이랑 참가자 명단이랑 같지 않으면 // 그 이름만 반환할거임 return participant[i]; // 완주하지 못한 참가자가 됨 } } // end for // while 문도 가능 i = 0 대입하고 동일하게 완주자 수만큼 반복해야 됨. // 한 번 반복할 때마다 i값 증가 /* int i = 0; while (i &lt; completion.length) { if (!participant[i].equals(completion[i])) { return participant[i]; } i++; } // end while */ return participant[i]; // i = i+1 된 값 // if문에 걸린 값 = 완주하지 못 한 참가자 = return 값 }}class main { public static void main(String[] args) { String [] a = {&quot;leo&quot;, &quot;kiki&quot;, &quot;eden&quot;}; String [] b = {&quot;kiki&quot;, &quot;eden&quot;}; Solution s = new Solution(); s.solution(a, b); }} 다른 사람의 풀이 hashmap을 이용하여 푸는 방법 이름과 인원수를 각각 key-value로 갖는 형식으로 completion을 먼저 반복한다. 인원수 + 1 한 다음, participant를 순회하면서 인원수 - 1. 이렇게 하면 결국 두 배열에서 차이가 나는 문자열만 value가 1이 되고 나머지는 모두 0이 됨. value값이 0보다 큰 녀석을 찾아서 해당 key값을 리턴. 123456789101112131415161718192021222324252627282930import java.util.HashMap;class Solution { public String solution(String[] participant, String[] completion) { String answer = &quot;&quot;; HashMap&lt;String, Integer&gt; hm = new HashMap&lt;&gt;(); // participant 배열의 모든 값을 해시 맵에 넣어줌 for (String player : participant) { // key = 문자열, value = 현재 맵에 저장된 문자열 갯수에 + 1 // 현재 map 안에 해당 문자열이 없다면 디폴트로 설정된 0에 1을 더해주고 // 있다면 해당 value값에 1을 다시 더해줌 -&gt; 이렇게하면 각각의 문자열이 몇 개가 있는지 저장 hm.put(player, hm.getOrDefault(player, 0) + 1); } // completion 배열의 모든 값을 해시 맵에 넣어줌 for (String player : completion) { // 같은 문자열을 찾아 value의 값을 -1해줌 hm.put(player, hm.get(player) - 1); } // HashMap의 Key로 구성된 Set을 하나 얻어서 반복 -&gt; 해당 key가 가진 value를 검색(get) for (String key : hm.keySet()) { if (hm.get(key) != 0){ answer = key; } } return answer; }} getOrDefault(key, defaultValue) map에서 찾는 Key가 없다면 defaultValue를 리턴함","link":"/2020/10/20/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%99%84%EC%A3%BC%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EC%84%A0%EC%88%98-Java/"},{"title":"hexo 블로그에 테마 적용하기 - icarus Theme","text":"Hexo Icarus Theme hexo 테마hexo는 기본으로 landscape 테마가 설치되어 있다. 직접 테마를 만들어 쓸 수 있도록 HEXO THEME 제공 이미 만들어진 테마를 찾고 싶다면 Hexo Themes 에서 확인 가능!! 테마 적용하기 ICARUS 테마를 설치하였는데 각 테마마다 설치 방법을 설명해준다. icarus 테마도 hexo-theme-icarus repository 에서 설치방법을 알려주고 있다. 설치 터미널을 이용하여 hexo가 있는 디렉토리로 이동해 clone을 받아준다. 12$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus -b$ # git clone 테마 github 링크 themes/테마이름 -b blog 폴더 안에있는 _config.yml에서 theme 부분을 landscape에서 icarus로 수정한다. 123$ Extensions$ # Themes: https://hexo.io/themes/theme: icarus 로컬 서버를 실행한다. 12345$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server$ hexo g # generate의 단축 명령어$ hexo server$ hexo s # server의 단축 명령어 동시실행hexo Generate와 Deploy를 동시실행 할 수도 있다. 123456$ hexo deploy --generate #Deploy 전에 Generate를 해준다.$ hexo d -g #단축 명령어$ hexo generate --deploy #Generate 후에 Deploy를 해준다.$ hexo g -d #단축 명령어 https://username.github.io 로 접속하면 deploy된 사이트가 확인 가능하다. 이슈체크 !hexo server 을 마치면 아래와 같은 에러가 발생할 수 있다.1234567ERROR Package bulma-stylus is not installed.ERROR Package hexo-component-inferno is not installed.ERROR Package hexo-renderer-inferno is not installed.ERROR Package inferno is not installed.ERROR Package inferno-create-element is not installed.ERROR Please install the missing dependencies your Hexo site root directory:ERROR npm install --save bulma-stylus@0.8.0 hexo-component-inferno@^0.2.4 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3 icarus테마는 위 패키지 설치가 필요한 것이다!! 하나씩 차례대로 설치해줘야 한다. 1$ npm install --save bulma-stylus@0.8.0 hexo-component-inferno@^0.2.4 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3 패키지 뒤의 @0.8.0 같은 부분은 해당 패키지의 버전이다. 위 명령으로도 에러가 발생한다면 hexo 버전을 체크해야 한다. 12$ npm update$ hexo --verison # hexo 버전 확인 환경설정themes/icarus 폴더에 있는 _config.yml 에서 테마 설정을 변경 할 수 있다.블로그 폴더에도 _config.yml에서 설정을 변경하였는데 테마 역시 _config.yml를 사용하여 설정하여 준다. 1$ vim _config.icarus.yml Profile Sidebar Widget 말 그대로 프로필을 설정할 수 있다. 12345678910111213141516171819202122232425$ -$ position: left$ type: profile$ author: # Your name$ author_title: # Your title$ location: # where are you$ avatar: # URL or path to the avatar image$ gravatar: # your gravatar email$ follow_link: 'https://github.com'$ social_links:$ Github:$ icon: fab fa-github$ url: 'https://github.com'$ Facebook:$ icon: fab fa-facebook$ url: 'https://facebook.com'$ Twitter:$ icon: fab fa-twitter$ url: 'https://twitter.com'$ Dribbble:$ icon: fab fa-dribbble$ url: 'https://dribbble.com'$ RSS:$ icon: fas fa-rss$ url: / Sidebar Widgets Overview Categories, Archives. Tags 등을 설정할 수 있다. 보여줄 위젯과 위젯의 위치를 설정할 수 있다. 1234567891011121314151617181920212223242526272829$ widgets:$ -$ position: left$ type: category$ -$ position: left$ type: tagcloud$ -$ position: left$ type: recent_posts$ -$ position: left$ type: archive$ -$ position: left$ type: tag$ -$ type: subscribe_email$ description:$ # Feedburner ID$ feedburner_id: ''$ -$ position: left$ type: adsense$ # AdSense client ID$ client_id: ''$ # AdSense AD unit ID$ slot_id: '' 마치며아직 Catalogue, Thumbnail, About 페이지를 설정하지 못 했다…… 각각 post의 front-matter, _config.yml 를 만지면 될 것 같다. About 페이지는 $ hexo new page about 명령을 사용한다고 한다. 다음 hexo 포스트는 포스팅 스타일을 가져와야겠다.","link":"/2020/09/18/hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-%ED%85%8C%EB%A7%88-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-icarus-Theme/"},{"title":"[프로그래머스] 크레인 인형뽑기 게임 &#x2F; Java","text":"크레인 인형 뽑기 게임(Level 1)https://programmers.co.kr/learn/courses/30/lessons/64061 문제 설명게임개발자인 죠르디는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.죠르디는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다. 게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. (위 그림은 5 x 5 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. 모든 인형은 1 x 1 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다. 다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음) 게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요. 제한사항 board 배열은 2차원 배열로 크기는 5 x 5 이상 30 x 30 이하입니다. board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다. 0은 빈 칸을 나타냅니다. 1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다. moves 배열의 크기는 1 이상 1,000 이하입니다. moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다. 입출력 예 문제 요약 주어진 맵(인형뽑기 판) 배열 : board 인형뽑기의 움직임 배열 : moves 인형뽑기의 움직임에 따라 인형을 뽑고 바구니에 옮겨서 저장한다. 바구니에서 같은 인형이 만나서 터진 인형의 수를 반환한다. 문제풀이 인형을 저장할 자료구조가 필요(= 바구니)해서 Stack 을 사용하기로 했다. 크레인 작동에 따라 board 를 이동 board(뽑기판)은 가로로 위 -&gt; 아래 방향으로 이동 moves의 순서대로 인형을 뽑으면 {3, 1, 1, 3} 이 겹쳐서 4개가 터지게 된다. 1, 1 삭제 후 3, 3 삭제 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import java.util.Stack;/** * public Element push(Element item); -&gt; Stack에 객체 추가 * public Element pop(); -&gt; 맨 위에 저장된 객체를 꺼냄 * public Element peek(); -&gt; 맨 위에 저장된 객체 조회 * public boolean empty(); -&gt; stack의 값이 비었는지 확인, 비었으면 true, 아니면 false * */class Solution { public int solution(int[][] board, int[] moves) { int answer = 0; Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); // 인형을 담을 바구니 /** * 인형이 없는 칸은 0 !!! 인형의 종류 == 숫자 * 크레인이 인형을 뽑을 때 맨 위부터 아래로 뽑기 때문에 * 행은 계속 변경 필요 (0,0), (1,0), (2,0) ... * moves배열에 있는 요소를 board[][] 배열의 '열' 값에 넣어서 비교 * 배열의 인덱스는 0부터 시작하므로 -1 */ for (int i = 0; i &lt; moves.length ; i++) { // moves 만큼 반복문 for (int j = 0; j &lt; board.length ; j++) { // 라인에서 인형을 뽑기 위한 반복문 if (board[j][moves[i]-1] != 0) { if (stack.isEmpty()){ // 인형 바구니(stack) 비었다면 -&gt; stack에 인형넣기 stack.push(board[j][moves[i]-1]); } else { // stack 에 인형이 있다면 if(stack.peek() == board[j][moves[i]-1]){ // peek()해서 집은 인형이랑 stack에 있는 인형이랑 같은 건지 비교 stack.pop(); // 그래서 같으면 stack 에서 인형을 터트릴 거임 answer += 2; // answer + 2 =&gt; 같은 인형이 2개 일때 터지니까 + 2 } else { // 각각 다른 인형일 땐 stack.push(board[j][moves[i] -1 ]); // 그대로 다시 stack 인형 넣기 } } // 인형뽑기상자(board)의 해당 라인에는 이제 인형이 없으니까 0 으로 표시 board[j][moves[i]-1] = 0; break; } } // end for } // end for return answer; }}@Test class main { public static void main(String[] args) { int[][] x = { {0,0,0,0,0}, {0,0,1,0,3}, {0,2,5,0,1}, {4,2,4,4,2}, {3,5,1,3,1} }; int[] y = {1,5,3,5,1,2,1,4}; Solution s = new Solution(); s.solution(x, y); }}","link":"/2020/11/05/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%ED%81%AC%EB%A0%88%EC%9D%B8-%EC%9D%B8%ED%98%95%EB%BD%91%EA%B8%B0-%EA%B2%8C%EC%9E%84-Java/"},{"title":"20200824-TIL","text":"hexo posting 전에 확인할 것!!!1$ nvm use 12.18.3 # nvm 버전을 12.18.3으로 변경한 후에 new post 가능함 CHAPTER 6객체지향 프로그래밍 (Object Oriented Programming; OOP) 01. 객체지향 언어(Object-Oriented Programming Language)객체지향 언어의 주요 특징 코드의 재사용성이 높다. 새로운 코드를 작성할 떄 기존의 코드를 이용하여 쉽게 작성할 수 있다. 코드의 관리가 용이하다. 코드간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경할 수 있다. 신뢰성이 높은 프로그래밍을 가능하게 한다. 제어자와 메서드(함수, method)를 이용해서 데이터를 보호하고 올바른 값을 유지하도록 하며, 코드의 중복을 제거하여 코드의 불일치로 인한 오작동을 방지할 수 있다. 02. 클래스와 객체클래스(Class) 객체를 정의해 놓은 것 객체의 설계도 또는 틀 클래스는 객체를 생성하는데 사용된다. 객체(Object/Instance) 객체는 클래스에 정의된 대로 메모리에 생성되는 것. (클래스의 인스턴스) 실제로 메모리 상에 할당된 것 클래스와 객체는 제품 설계도와 제품과의 관계와도 같다. (붕어빵 틀과 붕어빵) 03. 객체의 구성요소 - 속성과 기능객체는 속성과 기능의 집합. 객체가 가지고 있는 속성과 기능을 객체의 멤버(member) 라고 한다. 객체지향 프로그래밍에서는 속성과 기능을 각각 변수와 메서드로 표현한다. 속성(Attribute, field) : 클래스에 속하는 멤버 변수(member variable), 상태, 필드 기능(function) : 메소드(Method). 클래스에 속하는 멤버 함수(member function), 행동 Field는 클래스의 data member. public, static, non-static, final로 선언될 수 있는 것을 모두 field라고 함.Attribute는 field를 지칭하는 용어인데 보통 바로 접근할 수 있는 public field를 attribute라고 하고,Property도 field를 지칭하는데 보통 getter, setter 조합과 함께 사용되는 field를 말한다. 04. 객체와 인스턴스인스턴스 (Instance)어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고 한다. 인스턴스화(Instantiate)클래스로부터 객체를 만드는 과정. (클래스에서 객체를 생성하는 과정) Object, Instace : Instantiation으로 인해 생성된 객체 05. 한 파일에 여러 클래스 작성하기소스 파일의 이름은 public class의 이름과 일치해야 한다. 소스 파일 내 public class 가 없다면 소스 파일의 이름은 파일 내 어떤 클래스의 이름으로 해도 상관없다. 하나의 소스파일에 둘 이상의 public class 가 존재할 수 없다. ex) Hello.java를 컴파일하면 -&gt; Hello2.class 와 Hello3.class 두 개의 클래스 파일이 생성 됨. 06. 객체의 생성과 사용12345클래스명 변수명; // 클래스의 객체를 참조하기 위한 참조변수를 선언변수명 = new 클래스명(); // 클래스의 객체(인스턴스)를 생성한 후에, 객체(인스턴스)의 주소를 참조변수에 저장Tv t; // Tv 클래스 타입의 참조변수 t 를 선언t = new Tv(); // Tv 인스턴스를 생성한 후에, Tv 인스턴스의 주소를 t 에 저장 클래스를 구체화하여 값을 생성한 것을 객체라 한다. 하나의 클래스로 여러개의 객체를 만들 경우, 같은 타입의 독립적인 객체가 된다. 07. 객체 배열객체를 배열로 다루는데, 객체 배열 안에 객체가 저장되는 것이 아니라 객체의 주소가 저장된다. 123Tv tv1, tv2, tv3;Tv[] tvArr = new Tv[3]; // 길이가 3인 Tv 타입의 참조변수 배열 각 요소는 참조변수의 기본값인 null로 자동 초기화 된다. 123456789Tv[] tvArr = new Tv[3]; // 참조변수 배열(객체배열) 을 생성// 객체를 생성해서 배열의 각 요소에 저장tvArr[0] = new Tv();tvArr[1] = new Tv();tvArr[2] = new Tv();// 배열 초기화 블럭 사용Tv[] tvArr = { new Tv(), new Tv(), new Tv() }; 08. 클래스의 정의 (1) - 데이터와 함수의 결합 변수 하나의 데이터를 저장할 수 있는 공간 배열 같은 종류의 여러 데이터를 하나의 집합으로 저장할 수 있는 공간 구조체 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간 클래스 데이터와 함수의 결합(구조체 + 함수) 서로 관련된 변수와 함수들을 정의한 것이 클래스이다. 09. 클래스의 정의 (2) - 사용자 정의 타입사용자 정의 타입(user-defined type)프로그래머가 서로 관련된 변수들을 묶어서 하나의 타입으로 새로 추가하는 것. ( 클래스가 곧 사용자 정의 타입 ) 10. 선언위치에 따른 변수의 종류 클래스 변수 (Class Variable) 인스턴스 변수 (Instance Variable) 지역 변수 (Local Variable) 변수의 종류를 결정짓는 중요한 요소는 변수 선언 위치 이다. 멤버변수(member Variable) 을 제외한 나머지 변수는 모두 지역 변수이며, 멤버 변수 중 static이 붙은 것은 클래스 변수, 붙지 않은 것은 인스턴스 변수이다. 구분 선언 위치 변수 종류 특징 멤버 변수 클래스 영역 클래스 멤버 변수 static 키워드 o 멤버 변수 클래스 영역 인스턴스 멤버 변수 static 키워드 x 로컬 변수 메소드 및 블록 내부 로컬 변수 로컬 변수 메소드 내부 파라미터 변수 메소드의 입력 인자 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class Variables { int instanceVar; // 인스턴스 멤버 변수 static int classVar; // 클래스 멤버 변수 public void method(int parameterVar) { // 파라미터 변수 int localVar = 0; // 로컬 변수(메서드 영역. 메서드(함수)안에서만 선언 되고, 메서드 안에서만 유효함.) { localVar = 30; int localVar2 = 40; } localVar2 = 40; // =&gt; 접근 불가. 생명주기가 끝났다 (Life-cycle) }}class VariableTest { public static void main(String[] args) { System.out.println(&quot;클래스 변수&quot;); System.out.println(Variables.classVar); // 0 으로 초기화 됨 //클래스 변수는 클래스 이름으로 바로 접근 가능 Variables.classVar = 10; // 클래스이름.변수명으로 접근 // 접근 -&gt; 수정도 가능 System.out.println(Variables.classVar); System.out.println(&quot;&quot;); System.out.println(&quot;인스턴스 멤버 변수&quot;); Variables var = new Variables(); // 인스턴스 생성 System.out.println(var.instanceVar); // 0 으로 초기화 됨 var.instanceVar = 20; System.out.println(var.instanceVar); Variables var2 = new Variables(); System.out.println(var2.instanceVar); System.out.println(&quot;&quot;); // System.out.println(var2.classVar); // 가능하나 권장하지 않음 // Varables.instanceVar // 접근 불가능. 인스턴스 변수는 클래스에서 참조할 수 없음. (인스턴스에서만가능) System.out.println(&quot;&quot;); System.out.println(&quot;로컬 변수&quot;); var.method(9); //로컬 변수는 메서드 안에서만 유효. }} 11. 메서드란?메서드(Methods) 는 특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것. 객체가 하는 동작을 정의하는 어떠한 작업을 수행하는 코드의 집합 코드의 중복을 방지하고 유지보수성을 향상시키기 위해 사용 12345678910111213141516public class Car { String name; void printModel() { // 메소드의 정의 (Method definition) System.out.println(name); }}Car hyundai = new Car();Car kia = new Car();hyundai.name = &quot;Hyundai&quot;;kia.name = &quot;Kia&quot;;hyundai.printModel(); // 메소드의 호출 (Method call)kia.printModel(); 12. 메서드의 선언부 메소드는 함수의 형태로 구성된다. 파라미터 (Parameters, 입력) 실행문 (Executional Statements) 리턴 값 (Return Value, 출력) 매개변수 선언 (parameter declaration)메서드에 선언 된 입력 값. 필요한 값의 개수만큼 변수를 선언하며, 각 변수간의 구분은 쉼표를 사용한다. 각 변수의 타입이 같아도 변수 타입은 생략할 수 없다. 123456int add (int x, int y) { ...}// 불가능int add (int x, y) {} // 매개변수 y의 타입이 없어 에러. 가변 인자 (Variable Arguments) 입력 인자의 개수가 정해지지 않은 경우 1234567public int sumAll(int... params) { int sum = 0; for (int i: params) { sum += i; } return sum;} 반환 타입 (return type)1234567public int add(int x, int y) { return x + y;}제한자 리턴타입 메소드명(파라미터타입1 파라미터이름1, 파라미터타입2 파라미터이름2, ...) { // 실행문} 반환값이 없으면 리턴타입(반환타입)으로 void 를 사용한다. 13. 메서드의 구현부메서드 선언 부 다음에 오는 괄호를 메서드 구현부 {} 라고 한다. return 문 메서드 리턴타입이 void가 아닌 경우, 구현부 {} 안에 ‘return 반환값;’ 이 반드시 있어야 한다. 이 값의 타입은 반환타입과 일치하거나, 적어도 자동 형변환이 가능한 것이어야 한다. 단 하나의 값만 반환할 수 있다. 1234int add (int x, int y){ int result = x + y; return result; // 작업 결과(반환값)을 반환한다} 지역 변수 (Local variable)메서드 내에 선언된 변수. (매개변수도 메서드 내에서 선언된 것으로 간주되므로 지역 변수임) 123456789int add (int x, int y){ int result = x + y; return result;}int multiply (int x, int y){ int result = x * y; return result;} 14. 메서드의 호출12345678910int add (int x, int y){ return x + y;}public static void main(String[] args) { int result = add(3, 5); // 메서드 호출 (Method call) // int result add(1, 2, 3); // 경고. 메서드의 선언된 매개변수의 개수가 다름. // int result add(1.0, 2.9); // 경고. 매개변수의 타입이 다름. } 15. 메서드의 실행 흐름123456789101112131415161718192021class MyMath { long add (long a, long b){ long result = a + b; return result; } long subtract(long a, long b){ return a - b; } long multiply(long a, long b){ return a * b; } double divide(double a, double b){ return a / b; }}MyMath mm = new MyMath(); // 인스턴스 생성long value = mm.add(1L, 2L); // 메서드 호출 add 메서드를 호출한다 -&gt; 인수 1L과 2L이 메서드 add의 매개변수 a, b에 각각 복사(대입) 된다. 메서드 add의 괄호 {} 안에 있는 문장들이 순서대로 수행된다 메서드 add 의 모든 문장이 실행되거나, return 문을 만나면 호출한 메서드(main 메서드)로 되돌아와서 이후 문장들이 실행된다. 16. return문현재 실행 중인 메서드를 종료하고 호출한 메서드로 되돌아 간다. 원래 반환값 유무에 관계 없이 모든 메서드에서는 적어도 하나의 return문이 있어야 하지만, 반환 타입이 void 일 경우 return문은 생략된다.(컴파일러가 자동 추가) ```javavoid printGugudan(int dan) { for(int i = 0; i &lt;= 9; i++){ Systme.out.printf(&quot;%d * %d = %d%n&quot;, dan, i, dan * i); }// return; // 반환타입이 void 이므로 생략가능}`` void 가 아닐 경우 return 문이 없으면 컴파일 에러 발생. 17. 반환값return 문의 반환값이 항상 변수인 것은 아니다. 12345678int add (int x, int y) { int result = x + y; return result;}int add (int x, int y) { return x + y;} 1234567891011121314151617181920212223int abs (int x){ if(x &gt;= 0){ return x; }else { return -x; }}int diff (int x, int y) { int result = abs(x - y); return result;}int abs (int x){ return x &gt;= 0 ? x : -x;}int diff (int x, int y) { return abs(x - y);} 18. 호출스택(Call stack) 메소드 호출 스택 (Method Call Stack) 메서드가 호출되면 수행에 필요한 만큼의 메모리를 스택에 할당받는다. 메소드가 호출될 때 마다 메소드 동작과 로컬 변수가 쌓이는 메모리 영역. 메서드가 수행을 마치고 나면 사용했던 메모리를 반환하고 스택에서 제거된다. 호출 스택의 제일 위에 있는 메서드가 현재 실행중인 메서드이다. 아래 있는 메서드는 바로 위의 메서드를 호출한 메서드이다. 메소드가 종료될 때 메모리가 함께 반환됨(메모리 공간은 비워진다) 19. 기본형 매개변수 / 참조형 매개변수메서드를 호출할 때 매개변수로 지정한 값을 메서드의 매개변수에 복사해서 넘긴다. 매개변수 타입이 기본형(primitive type)일 땐 메서드 값이 복사됨 (Call by value). 값을 읽기만 할 수 있다 (read only) 매개변수 타입이 참조형(reference type) 일 땐 인스턴스의 주소값이 복사됨 (Call by reference). 변경 가능. (read &amp; write). 123456789101112131415161718192021222324252627282930public class Foo { int value;}public class Bar { public void swapPrimitive(int x, int y) { // 기본형 매개변수 int temp = x; x = y; y = temp; } public void swapReference(Foo x, Foo y) { // 참조형 매개변수 int temp = x.value; x.value = y.value; y.value = temp; }}Bar bar = new Bar();int x = 1, y = 10;bar.swapPrimitive(x, y);System.out.println(x); // 1System.out.println(y); // 10Foo foo1 = new Foo(1); Foo foo2 = new Foo(10);bar.swapReference(foo1, foo2); // 값이 저장된 주소를 넘겼기 때문에 값 변경도 가능함System.out.println(foo1.value); // 10System.out.println(foo2.value); // 1 참조형 반환 타입반환타입(리턴타입)이 reference(참조)형 이라는 것은 그 정수 값이 반환되는 것이다. 모든 참조형 타입의 값은 객체의 주소 이다!! 20. static 메서드와 인스턴스 메서드 클래스 메소드 (Class method) static 키워드를 이용하여 선언된 메소드 인스턴스가 아닌 클래스에 속하는 메소드 대표적으로 main 메소드가 클래스 메소드이다. 12345public class Foo { static public void main(String args[]) { // class method }} –멤버 변수는 클래스 영역에 선언된 변수이다. 멤버변수는 인스턴스 변수와 클래스 변수를 모두 통칭하는 말이다. 21. static을 언제 붙여야 할까? 클래스를 설계할 때, 멤버변수 중 모든 인스턴스에 공통으로 사용하는 것에 static을 붙인다. 생성된 각 인스턴스는 서로 독립적이기 때문에 각 인스턴스의 변수는 서로 다른 길을 유지한다. 그러나 모든 인스턴스에서 같은 값이 유지되어야 하는 변수는 static 을 붙여서 클래스 변수로 정의한다. 클래스변수(static 변수)는 인스턴스를 생성하지 않아도 사용할 수 있다 static 이 붙은 변수(클래스 변수)는 클래스가 메모리에 올라갈 때 이미 자동적으로 생성되기 때문이다. 클래스 메서드(static 메서드) 는 인스턴스 변수를 사용할 수 없다. 인스턴스 변수는 인스턴스가 반드시 존재해야만 사용할 수 있는데, 클래스 메서드(static 메서드) 는 인스턴스 생성 없이 호출 가능하므로 클래스 메서드가 호출되었을 때 인스턴스가 존재하지 않을 수 있다. 인스턴스 변수나 인스턴스 메서드는 static 이 붙은 멤버들을 사용하는 것이 가능하다. 인스턴스 변수가 존재한다는 것은 staitc 변수가 이미 메모리에 존재하기 때문이다. 메서드 내에서 인스턴스 변수를 사용하지 않는다면, static 을 붙이는 것을 고려한다. 메서드의 작업 내용 중에서 인스턴스변수를 필요로 한다면, static을 붙일 수 없다. 반대로 인스턴스 변수를 필요로 하지 않는다면 static을 붙이자. 메서드 호출 시간이 짧아지므로 성능이 향상된다. static을 안붙인 메서드(인스턴스메서드) 는 실행시 호출되어야 할 메서드를 찾는 과정이 추가적으로 필요하기 때문에 시간이 더 걸린다. 22. 메서드 간의 호출과 참조 같은 클래스에 속한 멤버들 간에는 별도의 인스턴스를 생성하지 않아도 서로 참조 또는 호출이 가능하다. (단, 클래스 멤버가 인스턴스멤버를 참조 또는 호출하고자 하는 경우에는 인스턴스 생성 필요) 인스턴스 멤버(인스턴스 변수, 인스턴스 메서드)가 존재하는 시점에 클래스 멤버는 항상 존재 클래스멤버가 존재하는 시점에 인스턴스 멤버가 존재하지 않을 수도 있음 123456789101112131415161718192021class TestClass { int iv; // 인스턴스 변수 static int cv; // 클래스 변수 void instanceMethod() {} // 인스턴스 메서드 static void staticMethod() {} // 클래스 메서드(static 메서드) void instanceMethod2() { // 인스턴스 메서드 instanceMethod(); // 다른 인스턴스 메서드 호출 staticMethod(); // 클래스 메서드 호출 System.out.println(iv);// 인스턴스 변수 사용 가능 System.out.println(cv);// 클래스 변수 사용 가능 } static void staticMethod2() { // 클래스 메서드 //instanceMethod(); // 에러. 인스터스 메서드 호출 불가능 staticMethod(); // static 메서드(클래스메서드) 호출 가능 System.out.println(iv); // 에러. 인스턴스 변수를 사용할 수 없다. System.out.println(cv); // 클래스 변수 사용 가능 }}// end class 23. 오버로딩(Overloading)메서드 오버로딩(Method Overloading), 오버로딩(Overloading) 동일 기능의 함수(메서드)를 추가로 구현하는 방법 입력 파라미터를 달리하는 동일 함수(메서드)명으로 구현한다. 매개변수의 개수 다른 것 포함 123456789101112131415161718192021222324public class Foo { // 오버로딩 public int sumAll(int ... params) { int sum = 0; for (int i: params) { sum += i; } return sum; } // 오버로딩 public float sumAll(float ... params) { float sum = 0.0f; for (float x: params) { sum += x; } return sum; }}Foo foo = Foo();int sum1 = foo.sumAll(1, 2, 3, 4, 5);float sum2 = foo.sumAll(1.0f, 2.0f, 3.0f, 4.0f, 5.0f); 24. 생성자 (Constructor) 클래스에서 인스턴스를 생성할 때 사용되는 메소드. 인스턴스 초기화 메서드. new 키워드를 이용해 호출 기본 생성자 (Default Constructor) 구현하지 않아도 자동으로 생성되는 생성자 아무런 동작도 하지 않고, 객체만을 생성 파라미터 생성자 (Parameter Constructors) 입력 파라미터를 받는 생성자 여러개의 파라미터 생성자를 오버로딩할 수 있음 보통 멤버 변수를 초기화하는 동작 수행 123456789101112131415public class Foo { int x; int y; String z; // public Foo() {} // Default Constructor public Foo(int a, int b, String c) { // Parameter Constructor // 생성자의 이름은 클래스의 이름과 같아야 한다. // 생성자는 리턴 값이 없다 x = a; y = b z = c; }} // end class 25. 생성자에서 다른 생성자 호출하기 - this() 객체가 스스로를 가르키는 참조. 생성자의 이름으로 클래스 이름 대신 this 사용. 멤버 변수와 로컬 변수의 이름이 같을 때, 멤버 변수임을 명시 생성자를 호출하는 데에도 사용할 수 있다. 한 생성자에서 다른 생성자를 호출 할 때는 반드시 첫 줄에서만 호출이 가능하다. 1234Car (String color){ door = 5; // 첫번째 줄 Car(color, &quot;auto&quot;, 4); // 에러. 생성자의 두번째 줄에서 다른 생성자 호출함} // 에러. Car 가 아니라 this(color, &quot;auto&quot;, 4); 로 해야 함 1234567891011121314151617181920public class Foo { int x; int y; String z; public Foo(int x, int y, String z) { this.x = x; this.y = y; this.z = z; } public Foo(String z) { this(0, 0, z); } public Foo(int x, int y) { this(x, y, &quot;Nothing&quot;); }} 수정이 필요한 경우 보다 적은 코드만을 변경하면 되므로 유지보수가 쉬워진다. 26. 객체 자신을 가리키는 참조변수 - thisjava123456789101112Car (String c, String g, int d){ color = c; // color는 인스턴스변수, c는 로컬변수 gearType = g; door = d;}Car (String color, String gearType, int door) { this.color = color; // this.color 는 인스턴스 변수, color는 생성자의 매개변수로 정의된 지역변수가 됨. this.gearType = gearType; this.door = door;} this. 는 참조변수로 인스턴스 자신을 가리킨다. this를 사용할 수 있는 건 인스턴스멤버 뿐이다. static 메서드(클래스메서드) 에서 인스턴스 멤버를 사용할 수 없는 것처럼, this도 사용할 수 없다. this : 인스턴스 자신을 가리키는 참조 변수. 인스턴스의 주소가 저장되어 있다. 모든 인스턴스 메서드에 지역변수로 숨겨진 채 존재한다. this(), this(매개변수) : 생성자, 같은 클래스의 다른 생성자를 호출할 때 사용한다. 27. 변수의 초기화변수를 선언하고 처음으로 값을 저장하는 것. 지역변수(로컬변수)는 사용하기 전 초기화가 필수 java12345678910class InitTest { // 인스턴스 변수 int x; int y = x; void method1(){ int i; // 지역변수 int j = i; // 에러. 지역변수를 초기화 하지 않음 }} x와 i는 선언만 하고 초기화를 하지 않았다. y를 초기화 하는데는 x를, j를 초기화하는데는 i를 사용했다.인스턴스 변수인 x는 초기화를 하지 않아도 자동적으로 int의 기본값인 0으로 초기화 되지만 method1() 의 지역변수 i는 자동적으로 초기화가 되지 않으므로, 초기화 되지 않은 상태에서 j를 초기화 하는데 사용할 수 없다. 28. 멤버변수의 초기화멤버변수는 각 타입의 기본값으로 자동 초기화 된다. 명시적 초기화 -&gt; 초기화 블럭 -&gt; 생성자의 순서로 초기화 됨. 클래스 변수가 인스턴스 변수보다 먼저 초기화 된다. 명시적 초기화(explicit initialization) 변수를 선언과 동시에 초기화하는 것. 1234class Car { int door = 4; // primitive type(기본형) 변수의 초기화 Engine e = new Engine(); // reference type(참조형) 변수의 초기화} 보다 복잡한 초기화 작어비 필요할 땐 초기화 블럭, 생성자를 사용해야 함 초기화 블록(Initializer) 클래스 또는 인스턴스를 생성할 때 단 한번 실행되는 코드 블록 클래스 초기화 블럭 : 클래스 변수의 초기화에 사용 인스턴스 초기화 블럭 : 인스턴스 변수의 초기화에 사용됨 12345678910111213141516public class Foo { static int classVar; int instanceVar; static { // Class Initializater classVar = 100; } { // Instance Initializer instanceVar = 10; } static { // May be more than one block }}","link":"/2020/08/24/20200824-TIL/"}],"tags":[{"name":"java","slug":"java","link":"/tags/java/"},{"name":"StringBuilder","slug":"stringbuilder","link":"/tags/stringbuilder/"},{"name":"TIL","slug":"til","link":"/tags/til/"},{"name":"overloading","slug":"overloading","link":"/tags/overloading/"},{"name":"final","slug":"final","link":"/tags/final/"},{"name":"SingletonPattern","slug":"singletonpattern","link":"/tags/singletonpattern/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"GitHub","slug":"github","link":"/tags/github/"},{"name":"로또","slug":"로또","link":"/tags/%EB%A1%9C%EB%98%90/"},{"name":"연습문제","slug":"연습문제","link":"/tags/%EC%97%B0%EC%8A%B5%EB%AC%B8%EC%A0%9C/"},{"name":"Java","slug":"java","link":"/tags/java/"},{"name":"lotto","slug":"lotto","link":"/tags/lotto/"},{"name":"OhMyZsh","slug":"ohmyzsh","link":"/tags/ohmyzsh/"},{"name":"zsh","slug":"zsh","link":"/tags/zsh/"},{"name":"CodingTest","slug":"codingtest","link":"/tags/codingtest/"},{"name":"algorithm","slug":"algorithm","link":"/tags/algorithm/"},{"name":"programmers","slug":"programmers","link":"/tags/programmers/"},{"name":"알고리즘","slug":"알고리즘","link":"/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"자바","slug":"자바","link":"/tags/%EC%9E%90%EB%B0%94/"},{"name":"코딩테스트","slug":"코딩테스트","link":"/tags/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/"},{"name":"프로그래머스","slug":"프로그래머스","link":"/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"hexo Theme","slug":"hexo-theme","link":"/tags/hexo-theme/"},{"name":"theme","slug":"theme","link":"/tags/theme/"}],"categories":[{"name":"Java","slug":"java","link":"/categories/java/"},{"name":"Hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"TIL","slug":"java/til","link":"/categories/java/til/"},{"name":"Setting","slug":"setting","link":"/categories/setting/"}]}